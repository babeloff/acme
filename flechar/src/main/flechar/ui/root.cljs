(ns flechar.ui.root
  (:require
   ;; #?(:clj [fulcro.client.dom-server :as dom]
    ;;   :cljs
    [fulcro.client.dom :as dom]
    [fulcro.client.primitives :as prim]
    [flechar.model.user :as user]
    [flechar.ui.components :as comp]
    [taoensso.timbre :as log]))

(prim/defsc User [this {:user/keys    [name]
                        :address/keys [street city]}]
  {:query [:user/id :user/name :address/street :address/city]
   :ident [:user/id :user/id]}
  (dom/li :.ui.item
    (dom/div :.content
      (str name (when street (str " of " street ", " city))))))

(def ui-user (prim/factory User {:keyfn :user/id}))

(prim/defsc Root [this {:keys [all-users]}]
  {:query         [{:all-users (prim/get-query User)}]
   :initial-state {:all-users []}}
  (dom/div :.ui.segments
    (dom/div :.ui.top.attached.segment
      (dom/h3 :.ui.header
        "Welcome to Fulcro!")
      (dom/p
        "This is full-stack demo content that shows off some of the dom/power of Pathom when used with Fulcro. "
        "The 'add user' button will randomly generate a user's id/name, and transact it with the server via a mutation join. "
        "The mutation join returns the newly created user with additional autogenerated server details (in this case address info). "
        "A mutation join is a transaction that can read after writing. ")
      (dom/p
        "The resolvers and mutations are in model/user.clj(s). "
        "The UI will query for all users on start, so after you
        add some, be sure to reload the page and see it come back.")
      (dom/p
        "Make sure you've installed Fulcro Inspect, and your Chrome devtools will let you examine all of the details
        of the running flechar!"))
    (dom/div :.ui.attached.segment
      (dom/div :.content
        (dom/div "Your system has the following users in the database:")
        (dom/ul :.ui.list
          (map ui-user all-users)))
      (dom/button :.ui.icon.button
        {:onClick (fn []
                    (let [id (str (random-uuid))]
                      (log/info "Adding user")
                      ;; NOTE: The lack of quoting works because we're using declare-mutation from incubator. see model.cljs
                      ;; NOTE 2: This is a "mutation join".  The mutation is sent with a query, and on success it
                      ;; returns the user.  This allows the server to tack on an address without us specifying it,
                      ;; and also have the local database/ui update with it.
                      (prim/transact! this [{(user/upsert-user {:user/id   id
                                                                :user/name (str "User " id)})
                                             (prim/get-query User)}])))}
        (dom/i :.plus.icon)
        "Add User"))))
